module Main where

import Asset 
import Scoring
import SellAsset
import Daml.Script

import DA.Set as Set
import DA.Action
import DA.List



setup : Script ()
setup = script do


    s1 <- allocatePartyWithHint "Solicitor 1" (PartyIdHint "Solicitor 1")   
    mrsOwner <- allocatePartyWithHint "Mrs Owner" (PartyIdHint "Mrs Owner")  
    ah<- allocatePartyWithHint "Auction House" (PartyIdHint "Auction House") 
    s2 <- allocatePartyWithHint "Solicitor 2" (PartyIdHint "Solicitor 2")   
    mrBuyer <- allocatePartyWithHint "Mr Buyer" (PartyIdHint "Mr Buyer") 
    p <-allocatePartyWithHint "P" (PartyIdHint "P") 
    time <- getTime

    assetId <- submit s1 do
        createCmd Asset with 
            ownerSolicitor = s1
            owner = mrsOwner
            auctionHouse = ah 
            address = "Mulholland Drive"
            idCode = "XX2325XXX"
            a_description = "Villa by the sea"
            a_documents = ["VillaDoc1", "VillaDoc2", "VillaDoc3" ]
            a_docLink = "Hash_RE_Documents"
            v_description = "Portrait of Adele Bloch-Bauer - Klimt"
            v_documents = ["KlimtDoc1", "KlimtDoc2", "KlimtDoc3" ]
            v_docLink = "Hash_FA_Documents"
            date = time
           
    updateAsset <- submit s1 do 
        exerciseCmd assetId UpdateAsset with 

            updated_address = "Mulholland Drive 135"
            updated_a_description = "Villa by the sea with a wonderful view"
            updated_a_documents = ["VillaDoc4", "VillaDoc5", "Villa6" ]
            updated_a_docLink  =  "Hash_RE_Documents_Updated_1"  
            updated_v_description = "Klimt Portrait of Adele Bloch-Bauer and Le Moulin de la Galette -Renoir"
            updated_v_documents = ["Renoir1", "Renoir2", "Renoir3" ]
            updated_v_docLink = "Hash_FA_Documents_Updated_1"
            updated_date = time

    Some asset <- queryContractId s1 updateAsset

    (currentAssetId, currentAsset) <- submit s1 do
        createAndExerciseCmd (AssetHelper s1) GetAssetByIdCode with
            idCode = "XX2325XXX"
    
    createproposal <- submit s1 do
        createCmd AssetProposal
            with 
        
                idCode = "XX2325XXX"
                proposerOwnerSolicitor = s2 --solicitor buyer
                proposerOwner = mrBuyer
                notes = "Offer for Mulholland Drive 135"
                date = time
                ownerSolicitor = s1
                owner = mrsOwner
                auctionHouse = ah

    makeoffer <- submit s1 do  
        exerciseCmd createproposal MakeAssetContractOffer
            with   
                assetproposal = " Proposal for The Mulholland Drive 135 Villa "
         
    reviseoffer <- submit s2 do
        exerciseCmd makeoffer ReviseAssetContractOffer
            with 
                offerRevison = "The documentation is incomplete."

    rejectprop <- submit s2 do 
        exerciseCmd reviseoffer RejectAssetContractOffer
            with feedback = "The plan of the first floer is missing. Please update the documentation"

    updateAsset2 <- submit s1 do 
        exerciseCmd updateAsset UpdateAsset
            with

                updated_address = "Mulholland Drive 135"
                updated_a_description = "Villa by the sea with a wonderful view"
                updated_a_documents = ["VillaDoc4", "VillaDoc5", "Villa6", "Plan 1st Floor"]
                updated_a_docLink  =  "Hash_RE_Documents_Updated_2"  
                updated_v_description = "Klimt Portrait of Adele Bloch-Bauer and Le Moulin de la Galette -Renoir"
                updated_v_documents = ["Renoir1", "Renoir2", "Renoir3" ]
                updated_v_docLink = "Hash_FA_Documents_Updated_2"
                updated_date = time

    makeoffer2 <- submit s1 do  
        exerciseCmd  rejectprop MakeAssetContractOffer
            with   
                assetproposal = " The documentation for The Mulholland Drive 135 Villa has been updated "
    
    acceptoffer<- submit s2 do
        exerciseCmd makeoffer2 AcceptAssetProposal

            

    query @AssetProposal s1

---testing the scoring system

    pSC <- allocateParty "Score Calculator"
    p1 <- allocateParty "Party1"
    p2 <- allocateParty "Party2"
    p3 <- allocateParty "Party3"
    p4 <- allocateParty "Party4"
    p5 <- allocateParty "Party5"
    s <- submit pSC do
        createCmd Score with
            assetidCode = "XX2325XXX"
            scoreCalculator = pSC
            calculatedScore = 0.0
            scoreVoters = Set.fromList [p1,p2,p3,p4,p5]
            alreadyVoted = Set.empty

    let counterList = [0..4]
    let scoresList = [1,2,3,4,5]
    let partiesList = [p1,p2,p3,p4,p5]
    foldlA (\s x -> submit (partiesList !! x) do
        exerciseCmd s Score_Vote with
            scoreVoter = partiesList !! x
            score = scoresList !! x)
        s counterList

    return ()

    

 
    

